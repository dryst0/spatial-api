"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import ast
import os
import re
import sys

from psycopg2.extensions import ISOLATION_LEVEL_SERIALIZABLE


def env(key, default=None, valuetype=str, required=False, nullable=bool):
    if required and (key not in os.environ):
        raise RuntimeError(f"Required environment settings {key} not found")

    if valuetype == bool:
        raw_val = default

        if key in os.environ:
            raw_val = ast.literal_eval(os.environ.get(key))
    elif valuetype == list:
        raw_val = default

        if key in os.environ:
            raw_val = re.split(r", ?", os.environ.get(key))
    else:
        raw_val = os.environ.get(key, default)

    val = valuetype(raw_val)

    if nullable and (default is None) and (raw_val == default):
        val = default

    return val


MAIN_DOMAIN = env("API_MAIN_DOMAIN", valuetype=str, required=True)


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("API_SECRET_KEY", required=True)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = not env("PRODUCTION", valuetype=bool, default=False)

ALLOWED_HOSTS = env("API_ALLOWED_HOSTS", valuetype=list, default="localhost")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    # -- 3rd-party Libraries
    "django_filters",
    "drf_spectacular",
    "rest_framework",
    "rest_framework_gis",
    # -- Business Libraries
    "world",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.middleware.cache.UpdateCacheMiddleware",
    "django.middleware.gzip.GZipMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.http.ConditionalGetMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.cache.FetchFromCacheMiddleware",
]

ROOT_URLCONF = "api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.template.context_processors.media",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "api.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "HOST": env("API_DB_HOST", valuetype=str, default="localhost"),
        "PORT": env("API_DB_PORT", valuetype=int, default=5432),
        "NAME": env("API_DB_NAME", valuetype=str, required=True),
        "USER": env("API_DB_USERNAME", valuetype=str, required=True),
        "PASSWORD": env("API_DB_PASSWORD", valuetype=str, required=True),
        "OPTIONS": {
            "isolation_level": ISOLATION_LEVEL_SERIALIZABLE,
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = env("API_TIME_ZONE", valuetype=str, default="UTC")

USE_I18N = True

USE_L10N = True

USE_TZ = True


# User-uploaded files
# https://docs.djangoproject.com/en/3.0/ref/settings/#media-root
MEDIA_ROOT = env("API_MEDIA_ROOT", valuetype=str, required=True)
MEDIA_URL_DOMAIN = env("API_MEDIA_URL_DOMAIN", "", valuetype=str, required=True)
MEDIA_URL_PATH = env("API_MEDIA_URL_PATH", valuetype=str, required=True)
MEDIA_URL = "//" + MEDIA_URL_DOMAIN + MEDIA_URL_PATH


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATIC_ROOT = env("API_STATIC_ROOT", valuetype=str, required=True)
STATIC_URL_DOMAIN = env("API_STATIC_URL_DOMAIN", "", valuetype=str, required=True)
STATIC_URL_PATH = env("API_STATIC_URL_PATH", valuetype=str, required=True)

if DEBUG:
    MEDIA_URL = MEDIA_URL_PATH
    STATIC_URL = STATIC_URL_PATH

STATIC_URL = "//" + STATIC_URL_DOMAIN + STATIC_URL_PATH

# Logging
LOGGING_VERBOSE_FORMAT = (
    "%(asctime)s [%(process)d] " + "%(module)s:%(lineno)d %(levelname)s %(message)s"
)
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {"format": LOGGING_VERBOSE_FORMAT},
    },
    "handlers": {
        "console": {
            "level": env("API_LOG_LEVEL", "INFO"),
            "class": "logging.StreamHandler",
            "formatter": "verbose",
            "stream": sys.stdout,
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "world": {
            "handlers": ["console"],
            "level": env("API_LOG_LEVEL", "INFO"),
            "propagate": True,
        },
    },
}

# REST Framework
REST_FRAMEWORK = {
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "rest_framework_gis.pagination.GeoJsonPagination",
    "DEFAULT_RENDERER_CLASSES": (
        "djangorestframework_camel_case.render.CamelCaseJSONRenderer",
    ),
    "DEFAULT_PARSER_CLASSES": (
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
    ),
    "COERCE_DECIMAL_TO_STRING": False,
    "PAGE_SIZE": 5,
}


# OpenAPI Documentation
SPECTACULAR_SETTINGS = {
    "TITLE": "JFI GeoSpatial Microservice",
    "DESCRIPTION": """
    A microservice to perform GeoSpatial Queries.
    As of now, the microservice is able to reverse geocode coordinates that belongs to the following countries:
        India (Administrative Levels 0 to 2)
        Indonesia (Administrative Levels 0 to 2)
        Malaysia (Administrative Levels 0 to 2)
        Philippines (Administrative Levels 0 to 3)
        Singapore (Administrative Levels 0 to 2)
    Administrative Level Data was provided from geoBoundaries by the William & Mary geoLab (https://www.geoboundaries.org/downloadFull.html#StandardizedCountry)
    More GeoSpatial Features and Queries will be supported soon.
    """,
    "VERSION": env("API_VERSION", valuetype=str, required=True),
    "TAGS": ["spatial", "administrative-levels"],
}

# Caching
CACHE_LOCATION = f"redis://{env('API_CACHE_HOST', valuetype=str, default='localhost')}:{env('API_CACHE_PORT', valuetype=int, default=6379)}/{env('API_CACHE_DATABASE_INDEX', valuetype=int, default=0)}"
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": CACHE_LOCATION,
        "OPTIONS": {
            "PASSWORD": env("API_CACHE_PASSWORD", valuetype=str, required=True),
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PARSER_CLASS": "redis.connection.HiredisParser",
            "COMPRESSOR": "django_redis.compressors.lz4.Lz4Compressor",
            "CONNECTION_POOL_KWARGS": {
                "max_connections": env(
                    "API_CACHE_MAX_CONNECTIONS", valuetype=int, default=5
                ),
                "retry_on_timeout": env(
                    "API_CACHE_RETRY_ON_TIMEOUT", valuetype=bool, default=True
                ),
            },
            "PICKLE_VERSION": env(
                "API_CACHE_PICKLE_VERSION", valuetype=int, default=-1
            ),
        },
    }
}
